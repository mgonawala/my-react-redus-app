{"version":3,"sources":["AuthorQuiz.js","serviceWorker.js","AddAuthorForm.js","index.js"],"names":["Hero","props","className","Turn","author","books","highlight","onAnswerSelected","id","style","backgroundColor","highLightToBgColor","src","imageUrl","alt","map","title","index","Book","key","onClick","Continue","show","onContinue","Footer","href","AuthorQuiz","connect","state","turnData","dispatch","answer","console","log","type","onContinueHandler","to","Boolean","window","location","hostname","match","AuthorForm","name","bookTemp","onChangeHandler","bind","onSubmitHandler","bookAddHandler","event","preventDefault","this","setState","concat","onAddAuthorForm","target","value","onSubmit","htmlFor","onChange","book","React","Component","AddAuthorForm","history","push","withRouter","authors","imageSource","getTurnData","length","allBooks","reduce","p","c","i","fourRandomBooks","shuffle","slice","sample","find","some","store","Redux","action","isCorrect","Object","assign","AddAuthorFormWrapper","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98ce7fcc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './bootstrap.min.css';\nimport PropTypes, {func} from 'prop-types';\nimport {Link} from \"react-router-dom\";\nimport {connect} from 'react-redux';\n\nfunction Hero(props){\n    return(\n        <div className=\"row\">\n            <div className=\"jumbotron col-10 offset-1\">\n                <h1>\n                    Author Quiz\n                </h1>\n                <p>\n                   Select the book written by Author shown.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nfunction Turn({author, books, highlight, onAnswerSelected}){\n    function highLightToBgColor(highlight) {\n        const mapping = {\n            'none':'',\n            'correct': 'green',\n            'wrong': 'red'\n        }\n        return mapping[highlight];\n    }\n return(\n     <div id=\"turn\" className=\"row turn\" style={{backgroundColor: highLightToBgColor(highlight)}}>\n            <div className=\"col-4 offset-1\">\n                    <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\"/>\n            </div>\n         <div className=\"col-6\">\n             {books.map((title,index) => <Book  title={title} key={title} onClick={onAnswerSelected}/>)}\n         </div>\n     </div>\n );\n}\n\nfunction Book({title, onClick}) {\n    return( <div className=\"answer\" onClick={()=>onClick(title)}>\n        <h4>{title} </h4>\n    </div>);\n}\nfunction Continue({show, onContinue}){\n    return(\n        <div className=\"row continue\">\n            {\n                show\n                    ? <div className=\"col-11\">\n                        <button className=\"btn btn-primary btn-lg float-right\" onClick={onContinue}>Continue</button>\n                    </div>\n                    : null\n            }\n        </div>\n    );\n}\n\nfunction Footer(){\n    return(\n        <div className=\"row\" id=\"footer\">\n            <div className=\"col-12\">\n                <p className=\"text-muted credit\">\n                    All images are from <a href=\"https://en.wikipedia.org/wiki\"> wiki </a> page.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return{\n        turnData: state.turnData,\n        highlight: state.highlight\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return{\n        onAnswerSelected: (answer) => {\n            console.log('dispatching in answer_selected'+ answer);\n            dispatch({type: 'ANSWER_SELECTED', answer})\n        },\n        onContinueHandler: () => dispatch({type: 'CONTINUE'}),\n    }\n}\n\nconst AuthorQuiz = connect(mapStateToProps, mapDispatchToProps)(\n    function ({turnData, highlight, onAnswerSelected, onContinueHandler}) {\n        return (\n            <div className=\"container-fluid\">\n                <Hero/>\n                <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected}/>\n                <Continue show={highlight === 'correct'} onContinue={onContinueHandler}/>\n                <p><Link to=\"/add\">Add Author</Link></p>\n                <Footer />\n            </div>\n        );\n    }\n);\n\n\nTurn.propTypes = {\n    author : PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            imageUrl: PropTypes.string.isRequired,\n            imageSource: PropTypes.string,\n            books: PropTypes.arrayOf(PropTypes.string).isRequired\n    }),\n    books: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onAnswerSelected: PropTypes.func.isRequired,\n    highlight: PropTypes.string.isRequired\n}\n\nexport default AuthorQuiz;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AuthorQuiz is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './AddAuthorForm.css';\r\nimport './bootstrap.min.css';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nclass AuthorForm extends  React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageUrl: '',\r\n            bookTemp: '',\r\n            books: []\r\n        }\r\n        this.onChangeHandler = this.onChangeHandler.bind(this);\r\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\r\n        this.bookAddHandler = this.bookAddHandler.bind(this);\r\n    }\r\n\r\n    bookAddHandler(event){\r\n        event.preventDefault();\r\n        this.setState({\r\n            books:  this.state.books.concat(this.state.bookTemp),\r\n            bookTemp: ''\r\n        })\r\n    }\r\n    onSubmitHandler(event){\r\n        event.preventDefault();\r\n        this.props.onAddAuthorForm(this.state);\r\n    }\r\n\r\n    onChangeHandler(event){\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmitHandler}>\r\n                <div className=\"AddAuthorForm__input\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onChangeHandler}/>\r\n                </div>\r\n                <div className=\"AddAuthorForm__input\">\r\n                    <label htmlFor=\"imageUrl\">Image URL</label>\r\n                    <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl}  onChange={this.onChangeHandler}/>\r\n                </div>\r\n                <div className=\"AddAuthorForm__input\">\r\n                    {this.state.books.map(book => <p key={book}>{book}</p>)}\r\n                    <label htmlFor=\"bookTemp\">Book</label>\r\n                    <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp}  onChange={this.onChangeHandler}/>\r\n                    <button onClick={this.bookAddHandler} >+</button>\r\n                </div>\r\n                <input type=\"submit\" value=\"Add Author\"/>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch,props){\r\n    return{\r\n        onAddAuthorForm: (author) => {\r\n            dispatch({type: 'ADD_AUTHOR', author})\r\n            props.history.push('/');\r\n        }\r\n    }\r\n}\r\n\r\nconst AddAuthorForm = connect(mapStateToProps, mapDispatchToProps)(\r\n    function ({match, onAddAuthorForm}) {\r\n        return(\r\n            <div className=\"AddAuthorForm\">\r\n                <h1>Add Author form</h1>\r\n                <AuthorForm onAddAuthorForm={onAddAuthorForm}/>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\n\r\n\r\n\r\nexport default withRouter(AddAuthorForm);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route , withRouter, HashRouter} from 'react-router-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport * as serviceWorker from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\nimport AddAuthorForm from \"./AddAuthorForm\";\nimport * as Redux from 'redux';\nimport * as ReactRedux from 'react-redux';\n\nconst authors = [\n\n    {\n        name: 'Mark Twain',\n        imageUrl: 'authors/MarkTwain.jpg',\n        imageSource: 'Wikimedia commons',\n        books: ['The Adventures of Huckleberry Finn', 'Life on Mississippi', 'Roughing It']\n    }\n    ,\n    {\n        name: 'William Shakespeare',\n        imageUrl: 'authors/William.jpg',\n        imageSource: 'Wikimedia commons',\n        books: ['Four Tragedies', 'Sonnet 130', 'The rape of Lucrece']\n    },\n    {\n        name: 'J.K. Rowling',\n        imageUrl: 'authors/Rowling.jpg',\n        imageSource: 'Wikimedia commons',\n        books: ['Harry Potter', 'Lethal White', 'Career of Evil']\n    }\n];\n\nfunction getTurnData(authors) {\n    console.log(authors.length);\n    const allBooks = authors.reduce( function (p, c, i) {\n        return p.concat(c.books)\n    }, []);\n    const fourRandomBooks = shuffle(allBooks).slice(0,4);\n    const answer = sample(fourRandomBooks);\n    return {\n        books: fourRandomBooks,\n        author: authors.find( author => author.books.some( title => title === answer))\n    }\n}\n\nfunction reducer(state = {authors, turnData: getTurnData(authors), highlight: ''}, action){\n    switch (action.type) {\n        case 'ANSWER_SELECTED':\n            console.log(action);\n            const isCorrect = state.turnData.author.books.some(title => title === action.answer);\n            return Object.assign({},state, {highlight: isCorrect? 'correct':'wrong'});\n        case 'CONTINUE':\n            return Object.assign({},state, {highlight: '', turnData : getTurnData(authors)})\n        case 'ADD_AUTHOR':\n            return  Object.assign({}, state, {authors: authors.push(action.author)});\n        default:\n            return state;\n    }\n    return state;\n}\n\nlet store = Redux.createStore(reducer);\n\n\nclass AddAuthorFormWrapper extends React.Component{\n    render() {\n        const {history} = this.props;\n        return(\n            <AddAuthorForm onAddAuthorForm={(author)=> {\n                authors.push(author);\n                console.log(authors.length);\n                history.push('/');\n            } }/>\n        );\n    }\n}\nconst AddAuthFormWrapperWithRouter = withRouter(AddAuthorFormWrapper);\n\n\n\n    ReactDOM.render(\n        <ReactRedux.Provider store={store}>\n        <HashRouter>\n            <Route exact path=\"/\" component={AuthorQuiz}/>\n            <Route path=\"/add\" component={AddAuthorForm }/>\n        </HashRouter>\n        </ReactRedux.Provider>\n        ,\n        document.getElementById('root')\n    );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}